{
    "function_name": "text_to_wav_instance",
    "import_string": null,
    "function_string": "\n'''\nasync def text_to_wav_instance(node, text):\n    return None\n'''\n\nimport time\nimport wave\n\nfrom TTS.api import TTS\ntry:\n    tts = TTS(\"tts_models/multilingual/multi-dataset/xtts_v2\", gpu=True)\nexcept:\n    pass\ndef split_long_sentence(sentence, max_length=250):\n    if len(sentence) <= max_length:\n        return [sentence]\n    \n    sentences = []\n    while len(sentence) > max_length:\n        # Find the last space before max_length\n        last_space_idx = sentence.rfind(' ', 0, max_length)\n        # If no space is found, split at max_length\n        if last_space_idx == -1:\n            last_space_idx = max_length\n        sentences.append(sentence[:last_space_idx])\n        sentence = sentence[last_space_idx+1:]\n    \n    if sentence:\n        sentences.append(sentence)\n    \n    return sentences\ndef get_wav_duration(file_path):\n    with wave.open(file_path, 'rb') as wav_file:\n        # Get the number of frames in the file\n        frames = wav_file.getnframes()\n        # Get the frame rate (number of frames per second)\n        frame_rate = wav_file.getframerate()\n        # Calculate the duration of the file in seconds\n        duration = frames / float(frame_rate)\n        return duration\nasync def text_to_wav_instance(node, text):\n    filename = \"output.wav\"\n    if tts:\n        if node.trigger_in.startswith(\"prompt\"):\n            #Split audio first\n            # Tokenize the text into sentences\n            sentences = sent_tokenize(text)\n            split_sentences = []\n            for sentence in sentences:\n                if len(sentence) > 250:\n                    split_sentences.extend(split_long_sentence(sentence))\n                else:\n                    split_sentences.append(sentence)\n            node.args[\"sentences\"] = split_sentences\n            \n            \n        print(node.args[\"sentences\"])\n        \n        while not node.args[\"sentences\"][0]:\n            await asyncio.sleep(0.1)\n        \n\n        \n        if node.args[\"sentences\"][0]:\n            # generate speech by cloning a voice using default settings\n            tts.tts_to_file(node.args[\"sentences\"][0],\n            file_path=\"output.wav\",\n            speaker_wav=\"audio.wav\",\n            speed=1,\n            language=\"en\")\n        else:\n            pass\n        \n        try:\n            node.args[\"sentences\"].pop(0)\n        except:\n            pass\n        \n        try:\n            while node.args[\"sound\"].is_playing():\n                await asyncio.sleep(0.1)\n                print(\"Playing\")\n        except Exception as e:\n            print(\"Error, no sound found\", e)\n            node.args[\"sound\"] = None\n        \n        sound = SoundLoader.load(filename)\n        duration = get_wav_duration(\"output.wav\")\n        \n        \n        return {\"speech_wav\" : sound, \"duration\" : duration}\n    else:\n        engine = pyttsx3.init()\n        engine.save_to_file(text, filename)\n        engine.runAndWait()\n        \n        sound = SoundLoader.load(filename)\n        node.args[\"sound\"] = sound\n        return {\"speech_wav\" : sound}\n\n        ",
    "description": null,
    "documentation": null,
    "inputs": {
        "text": "string"
    },
    "outputs": {
        "speech_wav": "sound",
        "duration": "num"
    }
}