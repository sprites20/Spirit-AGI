{
    "function_name": "image_to_text",
    "import_string": null,
    "function_string": "\nasync def image_to_text(node, image_path=None):\n    if image_path:\n        # Load the image using PIL\n        \n        image = Image.open(image_path)\n\n        # Convert the image to a format OpenCV can work with\n        image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)\n\n        # Use pytesseract to get detailed OCR results\n        detailed_data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT)\n\n        # Initialize variables to store sentence/paragraph bounding boxes and text\n        boxes = []\n        current_box = None\n        current_text = \"\"\n\n        # Loop over each of the text elements found in the image\n        for i in range(len(detailed_data['level'])):\n            (x, y, w, h) = (detailed_data['left'][i], detailed_data['top'][i], detailed_data['width'][i], detailed_data['height'][i])\n            text = detailed_data['text'][i]\n            conf = int(detailed_data['conf'][i])\n            \n            # Only consider text elements with a confidence above a certain threshold\n            if conf > 40:\n                if current_box is None:\n                    # Start a new bounding box and text group\n                    current_box = (x, y, x + w, y + h)\n                    current_text = text\n                else:\n                    # Check if the text element is on a new line\n                    if y > current_box[3]:\n                        # Add a newline character\n                        current_text += \"\\n\"\n                    # Expand the current bounding box to include the new text element\n                    current_box = (\n                        min(current_box[0], x),\n                        min(current_box[1], y),\n                        max(current_box[2], x + w),\n                        max(current_box[3], y + h)\n                    )\n                    # Append text to the current group\n                    current_text += \" \" + text\n                \n                # Check if the next element is a new paragraph or sentence (using heuristic)\n                if i == len(detailed_data['level']) - 1 or detailed_data['block_num'][i] != detailed_data['block_num'][i + 1]:\n                    boxes.append((current_box, current_text))\n                    current_box = None\n                    current_text = \"\"\n        output_text = \"\"\n        # Draw bounding boxes around sentences/paragraphs and print the text and bounding box coordinates\n        for ((x1, y1, x2, y2), text) in boxes:\n            #cv2.rectangle(image_cv, (x1, y1), (x2, y2), (0, 255, 0), 2)\n            output_text += f\"Text:\\n{text}\\n\\n\"\n        print(output_text)\n        return {\"output_text\" : output_text}\n    else:\n        return {\"output_text\" : None}\n        ",
    "description": null,
    "documentation": null,
    "inputs": {
        "image_path": "string"
    },
    "outputs": {
        "output_text": "string"
    }
}