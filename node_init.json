{"file_chooser": {"function_name": "file_chooser", "import_string": "\nfrom tkinter import Tk, filedialog\n", "function_string": "\nasync def file_chooser(node):\n    print(node, node.node_id, node.output_args)\n    if node.trigger_in.startswith(\"display_output\"):\n        node.output_args = {\"user_image\" : None}\n        return {\"user_image\" : None}\n    elif node.trigger_in == \"Button : camera_icon\":\n        root = Tk()\n        root.withdraw()\n        file_path = filedialog.askopenfilename(filetypes=[(\"Image files\", \"*.png;*.jpg;*.jpeg\")])\n        root.destroy()\n        def pop(dt):\n            popup = Popup(title='No file selected',\n                          content=Label(text='No file selected.'),\n                          size_hint=(None, None), size=(400, 200))\n            popup.open()\n        if file_path:\n            #self.image.source = file_path\n            return {\"user_image\" : file_path}\n        else:\n            Clock.schedule_once(pop)\n        ", "description": null, "documentation": null, "inputs": {}, "outputs": {"user_image": "string"}}, "ignition": {"function_name": "ignition", "import_string": null, "function_string": "\nasync def ignition(node):\n    print(\"Ignition\")\n    await asyncio.sleep(.25)\n    return None\n            ", "description": null, "documentation": null, "inputs": {}, "outputs": {}}, "display_output": {"function_name": "display_output", "import_string": null, "function_string": "\nasync def display_output(node, user_input, output, instruct_type, generated_image_path, user_image):\n    app = MDApp.get_running_app()\n    print(\"Display Output: \", user_input, output)\n    user_text = user_input or \"test\"\n    response = output or \"test\"\n    await asyncio.sleep(.25)\n    def update_ui(dt):\n        user_header_text = '[b]User[/b] [size=12][color=#A9A9A9]{}[/color][/size]'.format(app.current_date)\n        bot_header_text = '[b]Bot[/b] [size=12][color=#A9A9A9]{}[/color][/size]'.format(app.current_date)\n        \n        user_message = user_header_text + '\\n' + user_text\n        bot_message = bot_header_text + '\\n' + response\n        \n        user_custom_component = CustomComponent(img_source=\"images/user_logo.png\", txt=user_message)\n        bot_custom_component = CustomComponent(img_source=\"images/bot_logo.png\", txt=bot_message)\n        \n        grid_layout = app.root.get_screen(\"chatbox\").ids.grid_layout\n        \n        grid_layout.add_widget(user_custom_component)\n        print(user_image)\n        if user_image != None:\n            print(user_image)\n            grid_layout.add_widget(CustomImageComponent(img_source=user_image))\n        grid_layout.add_widget(bot_custom_component)\n        \n        if instruct_type == 1:\n            #image_components.append(CustomImageComponent(img_source=generated_image_path))\n            grid_layout.add_widget(CustomImageComponent(img_source=generated_image_path))\n\n    # Schedule the update_ui function to run on the main thread\n    Clock.schedule_once(update_ui)\n        ", "description": null, "documentation": null, "inputs": {"user_input": "string", "output": "string", "instruct_type": "num", "generated_image_path": "string", "user_image": "string"}, "outputs": {}}, "select_model": {"function_name": "select_model", "import_string": null, "function_string": "\nasync def select_model(node):\n    print(\"select_model\")\n    await asyncio.sleep(.25)\n    return None\n            ", "description": null, "documentation": null, "inputs": {}, "outputs": {"model": "string"}}, "user_input": {"function_name": "user_input", "import_string": null, "function_string": "\nasync def user_input(node):\n    print(\"user_input\")\n    await asyncio.sleep(.25)\n    return None\n            ", "description": null, "documentation": null, "inputs": {}, "outputs": {"user_input": "string"}}, "context": {"function_name": "context", "import_string": null, "function_string": "\nasync def context(node):\n    print(\"context\")\n    await asyncio.sleep(.25)\n    return None\n            ", "description": null, "documentation": null, "inputs": {}, "outputs": {"context": "string"}}, "prompt": {"function_name": "prompt", "import_string": null, "function_string": "\nasync def prompt(node, model=None, user_prompt=None, context=None):\n    app = MDApp.get_running_app()\n    print(\"Prompt\")\n    print(model, user_prompt, context)\n    await asyncio.sleep(.25)\n    user_text = user_prompt\n    instruct_type = app.get_instruct_type(user_text)\n    generated_image_path = \"\"\n    if instruct_type == 1:\n        generated_image_path = app.generate_image_prompt(user_text)\n    # Continue the conversation            \n    response = app.continue_conversation()\n    print(\"output: \", response)\n    return {\"output\" : response, \"instruct_type\" : instruct_type, \"generated_image_path\" : generated_image_path}\n        ", "description": null, "documentation": null, "inputs": {"model": "string", "user_prompt": "string", "context": "string"}, "outputs": {"output": "string", "instruct_type": "num", "generated_image_path": "string"}}, "Button : camera_icon": {"function_name": "Button : camera_icon", "import_string": null, "function_string": null, "description": null, "documentation": null, "inputs": {}, "outputs": {}}}